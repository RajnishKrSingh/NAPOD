{"version":3,"sources":["components/DateInput.js","components/Photo.js","App.js","serviceWorker.js","index.js"],"names":["DateInput","props","class","onSubmit","changeDate","type","Photo","className","photo","title","src","url","alt","explanation","App","state","date","e","preventDefault","dateFromInput","target","value","setState","getPhoto","fetch","then","response","json","photoData","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6RAYeA,EAVG,SAAAC,GAAK,OACtB,0BAAMC,MAAM,sBAAsBC,SAAYF,EAAMG,YAApD,6BAGI,gCACA,2BAAOC,KAAK,aCKFC,EAVD,SAAAL,GAAK,OAClB,6BACI,wBAAIM,UAAU,SAASN,EAAMO,MAAMC,OACnC,yBAAKP,MAAM,8CACV,yBAAKA,MAAM,SAASQ,IAAKT,EAAMO,MAAMG,IAAKC,IAAKX,EAAMO,MAAMC,SAEzD,uBAAGF,UAAU,SAASN,EAAMO,MAAMK,eCmC3BC,G,iNAnCbC,MAAQ,CACNC,KAAM,GACNR,MAAO,I,EAGTJ,WAAa,SAAAa,GACXA,EAAEC,iBACF,IAAIC,EAAgBF,EAAEG,OAAO,GAAGC,MAChC,EAAKC,SAAS,CAACN,KAAMG,IACrB,EAAKI,SAASJ,I,EAShBI,SAAW,SAAAP,GACTQ,MAAM,4CAAD,OAA6CR,EAA7C,sDACFS,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAS,OAAI,EAAKN,SAAS,CAAEd,MAAOoB,Q,mFATzB,IAAD,OAClBJ,MAAM,wFACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAI,EAAKL,SAAS,CAAEd,MAAOmB,S,+BAUvC,OACE,6BACE,wBAAIpB,UAAU,kBAAd,wCACA,kBAAC,EAAD,CAAWH,WAAcyB,KAAKzB,WAAYY,KAAQa,KAAKd,MAAMC,OAC7D,kBAAC,EAAD,CAAOR,MAASqB,KAAKd,MAAMP,a,GA9BjBsB,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,iB","file":"static/js/main.bd513b1e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst DateInput = props => (\r\n\t<form class=\"pa4 black-80 fw7 f4\" onSubmit = {props.changeDate}>\r\n     Enter a Date\r\n     (YYYY-MM-DD):\r\n     <input />\r\n     <input type=\"submit\" />\r\n    </form>\r\n)\r\n\r\n\r\nexport default DateInput;","import React from 'react';\r\n\r\nconst Photo = props => (\r\n\t<div>\r\n\t    <h3 className=\"tc f3\">{props.photo.title}</h3>\r\n\t    <div class=\"mw5 mw7-ns center bg-light-gray pa3 ph5-ns\">\r\n\t    \t<img class=\"mw-100\" src={props.photo.url} alt={props.photo.title} />\r\n\t    </div>\r\n        <p className=\"tc f4\">{props.photo.explanation}</p>\r\n    </div> \r\n)\r\n\r\nexport default Photo;","import React, { Component } from 'react';\nimport DateInput from \"./components/DateInput.js\";\nimport Photo from \"./components/Photo.js\";\nimport './App.css';\n\n\n\nclass App extends Component {\n  state = {\n    date: \"\",\n    photo: \"\"\n  };\n\n  changeDate = e => {\n    e.preventDefault();\n    let dateFromInput = e.target[0].value;\n    this.setState({date: dateFromInput});\n    this.getPhoto(dateFromInput);\n  };\n\n  componentDidMount() {\n    fetch(`https://api.nasa.gov/planetary/apod?api_key=KQzt5yp38oofDZ1SbAoUTpdWvi5kZUL0kFm72hvs`)\n      .then(response => response.json())\n      .then(json => this.setState({ photo: json }));\n  };\n\n  getPhoto = date => {\n    fetch(`https://api.nasa.gov/planetary/apod?date=${date}&api_key=KQzt5yp38oofDZ1SbAoUTpdWvi5kZUL0kFm72hvs`)\n      .then(response => response.json())\n      .then(photoData => this.setState({ photo: photoData }));\n  };\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"tc shadow-5 f1\">NASA's Astronomy Picture of the Day!</h1>\n        <DateInput changeDate = {this.changeDate} date = {this.state.date} />\n        <Photo photo = {this.state.photo}/>\n      </div> \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}